version: '3'

services:
  postgres:
    image: postgres:13
    container_name: postgres
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=airflow
      - POSTGRES_PASSWORD=airflow
      - POSTGRES_DB=airflow
    restart: unless-stopped

  airflow:
    image: apache/airflow:2.8.1
    container_name: airflow
    user: "0"
    depends_on:
      - postgres
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres:5432/airflow
      - AIRFLOW__CORE__LOAD_EXAMPLES=false
      - PYTHONPATH=/project
    ports:
      - "8081:8080"
    volumes:
      - ./dags:/opt/airflow/dags
      - .:/project
      - ./logs:/opt/airflow/logs
    command: bash -c "sleep 60; echo 'Starting Airflow setup...'; while ! nc -z postgres 5432; do sleep 1; echo 'Waiting for Postgres...'; done; echo 'Postgres ready, running db init...'; airflow db init && echo 'DB initialized, creating user...'; airflow users create --username admin --firstname Admin --lastname User --role Admin --email admin@example.com --password admin && echo 'User created, starting services...'; airflow webserver & airflow scheduler"
    restart: unless-stopped

  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2182:2181"
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
    restart: unless-stopped

  kafka:
    image: confluentinc/cp-kafka:7.3.0
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    volumes:
      - kafka_data:/var/lib/kafka/data
    restart: unless-stopped

  nifi:
    cap_add:
      - NET_ADMIN
    image: apache/nifi
    container_name: nifi
    environment:
      - SINGLE_USER_CREDENTIALS_USERNAME=admin
      - SINGLE_USER_CREDENTIALS_PASSWORD=ctsBtRBKHRAx69EqUghvvgEvjnaLjFEB
      - NIFI_WEB_HTTP_PORT=8080 
      - NIFI_WEB_HTTP_HOST=0.0.0.0
    ports:
      - "8080:8080/tcp"
      - "8443:8443/tcp"
      - "514:514/tcp"
      - "514:514/udp"
      - "2055:2055/udp"
    volumes:
      - nifi-conf:/opt/nifi/nifi-current/conf
      - nifi_flowfile:/opt/nifi/nifi-current/flowfile_repository
      - nifi_content:/opt/nifi/nifi-current/content_repository
      - ./staging/scripts/staging:/staging
    restart: unless-stopped

  minio:
    image: minio/minio:latest
    container_name: minio
    ports:
      - "9002:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    environment:
      - MINIO_ROOT_USER=ali
      - MINIO_ROOT_PASSWORD=aliali123
    command: server /data --console-address ":9001"
    restart: unless-stopped

  superset:
    image: apache/superset:latest
    container_name: superset
    depends_on:
      - superset_db
      - redis
    ports:
      - "8088:8088"
    environment:
      - SUPERSET_SECRET_KEY=supersecretkey
      - REDIS_HOST=redis
      - POSTGRES_HOST=superset_db
      - POSTGRES_USER=superset
      - POSTGRES_PASSWORD=superset
      - POSTGRES_DB=superset
      - SQLALCHEMY_DATABASE_URI=postgresql+psycopg2://superset:superset@superset_db:5432/superset
    volumes:
      - superset_home:/app/superset_home
    command: >
      /bin/bash -c "
        superset db upgrade &&
        superset fab create-admin --username admin --firstname Superset --lastname Admin --email admin@superset.com --password admin &&
        superset init &&
        superset run -h 0.0.0.0 -p 8088 --with-threads --reload --debugger"
    restart: unless-stopped

  superset_db:
    image: postgres:13
    container_name: superset_db
    environment:
      - POSTGRES_USER=superset
      - POSTGRES_PASSWORD=superset
      - POSTGRES_DB=superset
    volumes:
      - superset_db_data:/var/lib/postgresql/data
    restart: unless-stopped

  redis:
    image: redis:latest
    container_name: redis
    restart: unless-stopped

volumes:
  postgres_data:
  nifi-conf:
  nifi_flowfile:
  nifi_content:
  zookeeper_data:  
  kafka_data:  
  minio_data:
  superset_home:
  superset_db_data:
